{"version":3,"sources":["components/Timer.jsx","components/TimerButtons.jsx","components/SettingsButton.jsx","components/SettingsInputItem.jsx","components/SettingsModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","react_default","a","createElement","className","index_esm","value","text","concat","styles","buildStyles","strokeLinecap","pathTransitionDuration","pathColor","textColor","trailColor","TimerButtons","SettingsButton","_ref","openSettingsModal","onClick","xmlns","fill","viewBox","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","SettingsInputItem","label","name","type","SettingsModal","map","item","id","components_SettingsInputItem","key","App","_useState","useState","_useState2","Object","slicedToArray","settingsOpened","setSettingsOpened","components_SettingsModal","components_Timer","components_TimerButtons","components_SettingsButton","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.850000e9.chunk.js","sourcesContent":["import React from 'react';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\n\nconst Timer = () => {\n    const percentage = 66;\n    return (\n        <div className=\"pomodoro\">\n            <CircularProgressbar\n                value={percentage}\n                text={`${percentage}%`}\n                styles={buildStyles({\n                    // rotation: 0.25,\n                    strokeLinecap: 'butt',\n                    pathTransitionDuration: 0.5,\n                    pathColor: `rgba(250, 250, 250)`,\n                    textColor: '#FAFAFA',\n                    trailColor: 'rgba(250, 250, 250, 0.1)',\n                })}\n            />\n        </div>\n    )\n}\n\nexport default Timer","import React from \"react\";\n\nconst TimerButtons = () => {\n    return (\n        <div className=\"timer-buttons\">\n            <button className=\"pomodoro-button\">Start</button>\n        </div>\n    )\n}\n\nexport default TimerButtons","import React from \"react\";\n\n\nconst SettingsButton = ({openSettingsModal}) => {\n    return (\n        <div className=\"settings-button\">\n            <button className=\"settings-button__item\" onClick={openSettingsModal}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\" stroke-width=\"2\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                          d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"/>\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\n                </svg>\n            </button>\n        </div>\n    )\n}\n\nexport default SettingsButton","import React from 'react';\n\nconst SettingsInputItem = ({label, name, value}) => {\n    return (\n        <div>\n            <label className=\"settings-modal__label\">{label}</label>\n            <input type=\"number\"\n                   name={name}\n                   value={value}\n                   className=\"settings-modal__input\"/>\n        </div>\n    );\n};\n\nexport default SettingsInputItem;","import React from \"react\";\nimport SettingsInputItem from \"./SettingsInputItem\";\n\nconst SettingsModal = () => {\n    const settingsInputs = [\n        {\n            label: \"Pomodoro\",\n            name: \"inputPomodoroLength\"\n        },\n        {\n            label: \"Short Break\",\n            name: \"inputShortBreakLength\"\n        },\n        {\n            label: \"Long Break\",\n            name: \"inputLongBreakLength\"\n        },\n        {\n            label: \"Number of pomodoro between break\",\n            name: \"inputPomodoroBeforeLongBreak\"\n        },\n    ]\n    return (\n        <div className=\"settings-modal\">\n            <div className=\"settings-modal__content\">\n                <form className=\"settings-modal__form\">\n                    {settingsInputs.map((item, id) => {\n                        return (\n                            <SettingsInputItem\n                                key={id}\n                                label={item.label}\n                                name={item.name}\n                                value={'25'}\n                            />\n                        )\n                    })}\n                    <div>\n                        <button className=\"pomodoro-button\">Close</button>\n                        <button className=\"pomodoro-button\">Save</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsModal","import React, {useState} from \"react\";\nimport Timer from \"./components/Timer\";\nimport TimerButtons from \"./components/TimerButtons\";\nimport SettingsButton from \"./components/SettingsButton\";\n\nimport './App.css';\nimport SettingsModal from \"./components/SettingsModal\";\n\nfunction App() {\n    const [settingsOpened, setSettingsOpened] = useState(false);\n\n    const openSettingsModal = () => {\n        setSettingsOpened(!settingsOpened)\n    }\n\n    return (\n        <div className=\"container\">\n            {settingsOpened ? <SettingsModal /> : (\n                <div className=\"timer-wrapper\">\n                    <div>\n                        <Timer />\n                    </div>\n                    <div>\n                        <TimerButtons />\n                        <SettingsButton openSettingsModal={openSettingsModal} />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}